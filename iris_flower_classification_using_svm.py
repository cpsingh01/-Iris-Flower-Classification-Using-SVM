# -*- coding: utf-8 -*-
"""Iris Flower Classification Using SVM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U_QdYFHDtiRk4unczw-Pxvven-kvDMRW

✅ Step 1: Import Libraries
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.decomposition import PCA

"""✅ Step 2: Load Dataset"""

iris = datasets.load_iris()
X = iris.data
y = iris.target
df = pd.DataFrame(data=iris.data, columns=iris.feature_names)
df['target'] = iris.target
df['target_names'] = df['target'].apply(lambda x: iris.target_names[x])

"""✅ Step 3: Visualize the Data"""

# Pairplot
sns.pairplot(df, hue="target_names")
plt.suptitle("Pairplot of Iris Features", y=1.02)
plt.show()

# Heatmap of Correlations
plt.figure(figsize=(8, 5))
sns.heatmap(df.iloc[:, :-2].corr(), annot=True, cmap='coolwarm')
plt.title("Feature Correlation Heatmap")
plt.show()

"""✅ Step 4: Train-Test Split & Scaling"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""✅ Step 5: Train SVM Model"""

svm = SVC(kernel='linear')  # Try 'rbf' too
svm.fit(X_train_scaled, y_train)
y_pred = svm.predict(X_test_scaled)

"""✅ Step 6: Evaluate Model"""

print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

"""✅ Step 7: Visualize Decision Boundary (Hyperplane)"""

# PCA for 2D visualization
pca = PCA(n_components=2)
X_reduced = pca.fit_transform(X_train_scaled)
svm_2d = SVC(kernel='linear')
svm_2d.fit(X_reduced, y_train)

# Create mesh
x_min, x_max = X_reduced[:, 0].min() - 1, X_reduced[:, 0].max() + 1
y_min, y_max = X_reduced[:, 1].min() - 1, X_reduced[:, 1].max() + 1
xx, yy = np.meshgrid(np.linspace(x_min, x_max, 500),
                     np.linspace(y_min, y_max, 500))
Z = svm_2d.predict(np.c_[xx.ravel(), yy.ravel()])
Z = Z.reshape(xx.shape)

# Plot
plt.figure(figsize=(10, 6))
plt.contourf(xx, yy, Z, alpha=0.3)
scatter = plt.scatter(X_reduced[:, 0], X_reduced[:, 1], c=y_train, cmap='Set1', edgecolor='k')
plt.title("SVM Decision Boundary with Hyperplane (PCA Reduced Features)")
plt.xlabel("PCA Component 1")
plt.ylabel("PCA Component 2")
plt.show()

